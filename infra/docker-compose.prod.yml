version: '3.8'

services:
  api:
    build:
      context: ../server
      dockerfile: ../infra/Dockerfile.api
    ports:
      - "5175:5175"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:5175
      - ConnectionStrings__Default=${POSTGRES_CONNECTION_STRING}
      - Jwt__Key=${JWT_KEY}
      - Jwt__Issuer=${JWT_ISSUER}
      - Jwt__Audience=${JWT_AUDIENCE}
      - MercadoPago__AccessToken=${MERCADOPAGO_ACCESS_TOKEN}
      - MercadoPago__PublicKey=${MERCADOPAGO_PUBLIC_KEY}
      - MercadoPago__WebhookSecret=${MERCADOPAGO_WEBHOOK_SECRET}
      - FrontendUrl=${FRONTEND_URL}
      - BackendUrl=${BACKEND_URL}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped

  client:
    build:
      context: ../client
      dockerfile: ../infra/Dockerfile.client
    ports:
      - "5173:80"
    environment:
      - VITE_API_URL=${BACKEND_URL}
    depends_on:
      - api
    networks:
      - app-network
    restart: unless-stopped

  db:
    image: postgres:16-alpine
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-app}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backup:/backup
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.prod.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - client
      - api
    networks:
      - app-network
    restart: unless-stopped

volumes:
  postgres_data:
  backup:

networks:
  app-network:
    driver: bridge

